@using MudBlazor.Utilities
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor


<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout >
    <MudAppBar Elevation="0" Color="Color.Transparent" Style="border-bottom: 1px solid #e0e0e0;">
       
       @*  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <Search></Search>
        <AuthorizeView>
            <Authorized>
                <MudSpacer />
                <MudExpansionPanels>
                    <MudIconButton Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleRightDrawer())">
                        <MudAvatar Color="Color.Warning" Image="@userDto.Image"/>
                    </MudIconButton>
                </MudExpansionPanels>
            </Authorized>
            <NotAuthorized>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Login" OnClick="Login" Edge="Edge.End">Login</MudIconButton>
            </NotAuthorized> 
        </AuthorizeView>     *@
        <MudToggleIconButton Toggled="@_isDarkMode" ToggledChanged="OnToggledChanged"
                             Icon="@Icons.Material.Outlined.LightMode" Color="@Color.Inherit" Title="Default"
                             ToggledIcon="@Icons.Material.Outlined.DarkMode" ToggledColor="@Color.Dark" ToggledTitle="Dark" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Never" Breakpoint="Breakpoint.Sm" Elevation="24" Variant="@DrawerVariant.Persistent" OpenMiniOnHover="false">
        <NavMenuCategory/>
    </MudDrawer>
    <MudDrawer @bind-Open="@openEnd" ClipMode="DrawerClipMode.Never" Breakpoint="Breakpoint.Sm" Anchor="Anchor.End" Elevation="24" Variant="@DrawerVariant.Persistent" OpenMiniOnHover="false">
        <NavUser></NavUser>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    //UserDto userDto = new UserDto();
    bool _drawerOpen = true;
    bool openEnd = false;
    private bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;
    

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        _isDarkMode = toggled;
    }

    //protected  override async void OnInitialized()
    //{
    //    //userDto = await _localStorage.GetItemAsync<UserDto>("user");
    //}

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     userDto = await _localStorage.GetItemAsync<UserDto>("user");
    //     if (firstRender)
    //     {
    //         _isDarkMode = await _mudThemeProvider.GetSystemPreference();
    //         StateHasChanged();
    //     }
    // }


    // void DrawerToggle()
    // {
    //     _drawerOpen = !_drawerOpen;
    // }
    // void ToggleRightDrawer()
    // {
    //     openEnd = !openEnd;
    // }
    // void Login()
    // {
    //     _navigationManager.NavigateTo("/login");
    // }

    // protected async void UnloadHandler()
    // {
    //     await _jsRuntime.InvokeVoidAsync("beforunload");
        
    // }
}
